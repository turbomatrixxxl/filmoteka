{"mappings":"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","sources":["src/pagination.js"],"sourcesContent":["//PAGE CHANGER\n// selecting required element\nconst element = document.querySelector('.pagination ul');\nlet totalPages = 20;\nlet page = 1;\n\n//calling function with passing parameters and adding inside element which is ul tag\nelement.innerHTML = createPagination(totalPages, page);\nfunction createPagination(totalPages, page) {\n  let liTag = '';\n  let active;\n  let beforePage = page - 1;\n  let afterPage = page + 1;\n  if (page > 1) {\n    //show the next button if the page value is greater than 1\n    liTag += `<li class=\"btn prev\" onclick=\"createPagination(totalPages, ${\n      page - 1\n    })\"><span><i class=\"fas fa-angle-left\"></i> Prev</span></li>`;\n  }\n\n  if (page > 2) {\n    //if page value is less than 2 then add 1 after the previous button\n    liTag += `<li class=\"first numb\" onclick=\"createPagination(totalPages, 1)\"><span>1</span></li>`;\n    if (page > 3) {\n      //if page value is greater than 3 then add this (...) after the first li or page\n      liTag += `<li class=\"dots\"><span>...</span></li>`;\n    }\n  }\n\n  // how many pages or li show before the current li\n  if (page == totalPages) {\n    beforePage = beforePage - 2;\n  } else if (page == totalPages - 1) {\n    beforePage = beforePage - 1;\n  }\n  // how many pages or li show after the current li\n  if (page == 1) {\n    afterPage = afterPage + 2;\n  } else if (page == 2) {\n    afterPage = afterPage + 1;\n  }\n\n  for (var plength = beforePage; plength <= afterPage; plength++) {\n    if (plength > totalPages) {\n      //if plength is greater than totalPage length then continue\n      continue;\n    }\n    if (plength == 0) {\n      //if plength is 0 than add +1 in plength value\n      plength = plength + 1;\n    }\n    if (page == plength) {\n      //if page is equal to plength than assign active string in the active variable\n      active = 'active';\n    } else {\n      //else leave empty to the active variable\n      active = '';\n    }\n    liTag += `<li class=\"numb ${active}\" onclick=\"createPagination(totalPages, ${plength})\"><span>${plength}</span></li>`;\n  }\n\n  if (page < totalPages - 1) {\n    //if page value is less than totalPage value by -1 then show the last li or page\n    if (page < totalPages - 2) {\n      //if page value is less than totalPage value by -2 then add this (...) before the last li or page\n      liTag += `<li class=\"dots\"><span>...</span></li>`;\n    }\n    liTag += `<li class=\"last numb\" onclick=\"createPagination(totalPages, ${totalPages})\"><span>${totalPages}</span></li>`;\n  }\n\n  if (page < totalPages) {\n    //show the next button if the page value is less than totalPage(20)\n    liTag += `<li class=\"btn next\" onclick=\"createPagination(totalPages, ${\n      page + 1\n    })\"><span>Next <i class=\"fas fa-angle-right\"></i></span></li>`;\n  }\n  // console.log(page);\n  element.innerHTML = liTag; //add li tag inside ul tag\n  return liTag; //return the li tag\n}\n\nlet currentPage = 1;\n\nconst paginationContainer = document.querySelector('.pagination');\npaginationContainer.addEventListener('click', ev => {\n  // console.log(ev.currentTarget);\n  currentPage = ev.currentTarget.querySelector('.active>span').textContent;\n  // console.log(currentPage);\n  // return currentPage;\n});\n\n// console.log(currentPage);\nfunction searchPagination() {\n  paginationContainer.addEventListener('click', ev => {\n    // console.log(ev.currentTarget);\n    currentPage = ev.currentTarget.querySelector('.active>span').textContent;\n    console.log(currentPage);\n    findUrl = `https://api.themoviedb.org/3/search/movie?query=${searchText}&include_adult=true&language=en-US&page=${currentPage}`;\n\n    heroList.innerHTML = null;\n    console.log(findUrl);\n\n    fetch(findUrl, options)\n      .then(res => res.json())\n      .then(res => {\n        // console.log(findUrl);\n        console.log(res.total_pages);\n\n        if (res.total_pages < 20) {\n          totalPages = res.total_pages;\n        }\n        console.log(res.results);\n        const movies = res.results;\n        if (movies.length === 0) {\n          headerFormErrorMessage.style.display = 'block';\n\n          fetch(trendingMoviesUrl, options)\n            .then(res => res.json())\n            .then(res => {\n              // console.log(res);\n              // console.log(res.results);\n              const movies = res.results;\n              movies.map(element => {\n                renderCards(element);\n              });\n\n              const heroImagesLink =\n                document.querySelectorAll('.hero-cards-link');\n              // console.log(heroImagesLink);\n\n              heroImagesLink.forEach(link => {\n                const linkImage = link.querySelector('.hero-cards-image');\n                // console.log(linkImage);\n\n                link.addEventListener('click', ev => {\n                  ev.preventDefault();\n\n                  // console.log(ev.target);\n                  const currentLink = ev.currentTarget;\n                  console.log(currentLink);\n\n                  const linkSrc = currentLink.href;\n                  // console.log(linkSrc);\n                  modalImage.setAttribute('src', linkSrc);\n\n                  const linkId = currentLink.getAttribute('id');\n                  modalImage.setAttribute('id', linkId);\n\n                  // add remove buttons\n                  addRemButtons(\n                    'queued',\n                    linkId,\n                    modalAddToQueueBtn,\n                    modalRemFromQueueBtn\n                  );\n\n                  addRemButtons(\n                    'watched',\n                    linkId,\n                    modalAddToWatchBtn,\n                    modalRemFromWatchBtn\n                  );\n\n                  // add in link necesary attributes from api's\n                  const linkTitle = currentLink.getAttribute('title');\n                  // console.log(linkTitle);\n                  modalTitle.textContent = linkTitle;\n\n                  const linkVote = currentLink.getAttribute('vote');\n                  // console.log(linkVote);\n                  modalVote.textContent = linkVote;\n\n                  const linkVotes = currentLink.getAttribute('votes');\n                  // console.log(linkVotes);\n                  modalVotes.textContent = linkVotes;\n\n                  const linkPopurarity = currentLink.getAttribute('popularity');\n                  // console.log(linkPopurarity);\n                  modalPopularity.textContent = linkPopurarity;\n\n                  const linkOrigTitle =\n                    currentLink.getAttribute('original_title');\n                  // console.log(linkOrigTitle);\n                  modalOrigTitle.textContent = linkOrigTitle;\n\n                  const linkDescription =\n                    currentLink.getAttribute('description');\n                  // console.log(linkDescription);\n                  modalDescription.textContent = linkDescription;\n\n                  const genres = currentLink.getAttribute('genres');\n                  // console.log(genres);\n                  modalGenre.textContent = genres;\n\n                  modalWindow.classList.toggle('is-hidden');\n\n                  // setting the modal window gallery using the SimpleLightbox library and adding \"alt\" caption title on bottom with 250 ms delay\n                  // let gallery = new SimpleLightbox(`.gallery a`, {\n                  //   captionsData: 'src',\n                  //   captionDelay: 250,\n                  //   captionPosition: 'outside',\n                  //   alertError: false,\n                  //   captionHTML: false,\n                  // });\n                  // console.dir(gallery);\n                  // console.log(gallery.elements);\n                  // console.log(gallery.options);\n                });\n              });\n            })\n            .catch(err => console.error('error:' + err));\n        } else {\n          headerFormErrorMessage.style.display = 'none';\n        }\n\n        // create movies cards\n        movies.map(element => {\n          renderCards(element);\n        });\n\n        // Create modal for each link\n        const heroImagesLink = document.querySelectorAll('.hero-cards-link');\n        // console.log(heroImagesLink);\n\n        heroImagesLink.forEach(link => {\n          // const linkImage = link.querySelector('.hero-cards-image');\n          // console.log(linkImage);\n\n          link.addEventListener('click', ev => {\n            ev.preventDefault();\n\n            // console.log(ev.target);\n            const currentLink = ev.currentTarget;\n            console.log(currentLink);\n\n            const linkId = currentLink.getAttribute('id');\n            modalImage.setAttribute('id', linkId);\n\n            // Setting state for each link ad/remove watch/queue button\n            addRemButtons(\n              'queued',\n              linkId,\n              modalAddToQueueBtn,\n              modalRemFromQueueBtn\n            );\n\n            addRemButtons(\n              'watched',\n              linkId,\n              modalAddToWatchBtn,\n              modalRemFromWatchBtn\n            );\n\n            // condition if link has or not url for image\n            if (currentLink.href === noImageUrl) {\n              modalImage.setAttribute('src', noImageUrl);\n            } else {\n              // add in link necesary attribute from api's\n              const linkSrc = currentLink.href;\n              // console.log(linkSrc);\n              modalImage.setAttribute('src', linkSrc);\n            }\n\n            // add in link necesary attributes from api's\n\n            const linkTitle = currentLink.getAttribute('title');\n            // console.log(linkTitle);\n            modalTitle.textContent = linkTitle;\n\n            const linkVote = currentLink.getAttribute('vote');\n            // console.log(linkVote);\n            modalVote.textContent = linkVote;\n\n            const linkVotes = currentLink.getAttribute('votes');\n            // console.log(linkVotes);\n            modalVotes.textContent = linkVotes;\n\n            const linkPopurarity = currentLink.getAttribute('popularity');\n            // console.log(linkPopurarity);\n            modalPopularity.textContent = linkPopurarity;\n\n            const linkOrigTitle = currentLink.getAttribute('original_title');\n            // console.log(linkOrigTitle);\n            modalOrigTitle.textContent = linkOrigTitle;\n\n            const linkDescription = currentLink.getAttribute('description');\n            // console.log(linkDescription);\n            modalDescription.textContent = linkDescription;\n\n            const genres = currentLink.getAttribute('genres');\n            // console.log(genres);\n            modalGenre.textContent = genres;\n\n            modalWindow.classList.remove('is-hidden');\n\n            // setting the modal window gallery using the SimpleLightbox library and adding \"alt\" caption title on bottom with 250 ms delay\n            // let gallery = new SimpleLightbox(`.gallery a`, {\n            //   captionsData: 'src',\n            //   captionDelay: 250,\n            //   captionPosition: 'outside',\n            //   alertError: false,\n            //   captionHTML: false,\n            // });\n            // console.dir(gallery);\n            // console.log(gallery.elements);\n            // console.log(gallery.options);\n          });\n        });\n      })\n      .catch(err => console.error('error:' + err));\n  });\n}\n\nfunction heroPagination() {\n  paginationContainer.addEventListener('click', ev => {\n    // console.log(ev.currentTarget);\n    currentPage = ev.currentTarget.querySelector('.active>span').textContent;\n    console.log(currentPage);\n    trendingMoviesUrl = `https://api.themoviedb.org/3/trending/movie/day?language=en-US&page=${currentPage}`;\n\n    heroList.innerHTML = null;\n    console.log(trendingMoviesUrl);\n\n    fetch(trendingMoviesUrl, options)\n      .then(res => res.json())\n      .then(res => {\n        // console.log(res);\n        console.log(res.totalPages_pages);\n        if (res.totalPages_pages < 20) {\n          totalPages = res.totalPages_pages;\n        }\n\n        const movies = res.results;\n        movies.map(element => {\n          renderCards(element);\n        });\n\n        const heroImagesLink = document.querySelectorAll('.hero-cards-link');\n        // console.log(heroImagesLink);\n\n        heroImagesLink.forEach(link => {\n          // const linkImage = link.querySelector('.hero-cards-image');\n          // console.log(linkImage);\n\n          link.addEventListener('click', ev => {\n            ev.preventDefault();\n\n            // console.log(ev.target);\n            const currentLink = ev.currentTarget;\n            // console.log(currentLink);\n\n            const linkSrc = currentLink.href;\n            // console.log(linkSrc);\n            modalImage.setAttribute('src', linkSrc);\n\n            const linkId = currentLink.getAttribute('id');\n            modalImage.setAttribute('id', linkId);\n\n            addRemButtons(\n              'queued',\n              linkId,\n              modalAddToQueueBtn,\n              modalRemFromQueueBtn\n            );\n\n            addRemButtons(\n              'watched',\n              linkId,\n              modalAddToWatchBtn,\n              modalRemFromWatchBtn\n            );\n\n            const linkTitle = currentLink.getAttribute('title');\n            // console.log(linkTitle);\n            modalTitle.textContent = linkTitle;\n\n            const linkVote = currentLink.getAttribute('vote');\n            // console.log(linkVote);\n            modalVote.textContent = linkVote;\n\n            const linkVotes = currentLink.getAttribute('votes');\n            // console.log(linkVotes);\n            modalVotes.textContent = linkVotes;\n\n            const linkPopurarity = currentLink.getAttribute('popularity');\n            // console.log(linkPopurarity);\n            modalPopularity.textContent = linkPopurarity;\n\n            const linkOrigTitle = currentLink.getAttribute('original_title');\n            // console.log(linkOrigTitle);\n            modalOrigTitle.textContent = linkOrigTitle;\n\n            const linkDescription = currentLink.getAttribute('description');\n            // console.log(linkDescription);\n            modalDescription.textContent = linkDescription;\n\n            const genres = currentLink.getAttribute('genres');\n            // console.log(genres);\n            modalGenre.textContent = genres;\n\n            modalWindow.classList.toggle('is-hidden');\n          });\n        });\n      })\n      .catch(err => console.error('error:' + err));\n  });\n}\n"],"names":["element","document","querySelector","totalPages","page","createPagination","totalPages1","page1","liTag","beforePage","afterPage","concat","plength","innerHTML","currentPage","paginationContainer","searchPagination","addEventListener","ev1","currentTarget","textContent","console","log","findUrl","searchText","heroList","fetch","options","then","res","json","res1","total_pages","results","movies1","length","headerFormErrorMessage","style","display","trendingMoviesUrl","map","element1","renderCards","querySelectorAll","forEach","link","ev","preventDefault","currentLink","linkSrc","href","modalImage","setAttribute","linkId","getAttribute","addRemButtons","modalAddToQueueBtn","modalRemFromQueueBtn","modalAddToWatchBtn","modalRemFromWatchBtn","linkTitle","modalTitle","linkVote","modalVote","linkVotes","modalVotes","linkPopurarity","modalPopularity","linkOrigTitle","modalOrigTitle","linkDescription","modalDescription","genres","modalGenre","modalWindow","classList","toggle","catch","err","error","element2","noImageUrl","remove","heroPagination","ev2","totalPages_pages","element3"],"version":3,"file":"index.36111f3e.js.map"}